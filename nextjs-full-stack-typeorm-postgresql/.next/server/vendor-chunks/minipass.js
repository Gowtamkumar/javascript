"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minipass";
exports.ids = ["vendor-chunks/minipass"];
exports.modules = {

/***/ "(rsc)/./node_modules/minipass/dist/commonjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/minipass/dist/commonjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Minipass = exports.isWritable = exports.isReadable = exports.isStream = void 0;\nconst proc = typeof process === \"object\" && process ? process : {\n    stdout: null,\n    stderr: null\n};\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __importDefault(__webpack_require__(/*! stream */ \"stream\"));\nconst string_decoder_1 = __webpack_require__(/*! string_decoder */ \"string_decoder\");\n/**\n * Return true if the argument is a Minipass stream, Node stream, or something\n * else that Minipass can interact with.\n */ const isStream = (s)=>!!s && typeof s === \"object\" && (s instanceof Minipass || s instanceof stream_1.default || (0, exports.isReadable)(s) || (0, exports.isWritable)(s));\nexports.isStream = isStream;\n/**\n * Return true if the argument is a valid {@link Minipass.Readable}\n */ const isReadable = (s)=>!!s && typeof s === \"object\" && s instanceof events_1.EventEmitter && typeof s.pipe === \"function\" && // node core Writable streams have a pipe() method, but it throws\n    s.pipe !== stream_1.default.Writable.prototype.pipe;\nexports.isReadable = isReadable;\n/**\n * Return true if the argument is a valid {@link Minipass.Writable}\n */ const isWritable = (s)=>!!s && typeof s === \"object\" && s instanceof events_1.EventEmitter && typeof s.write === \"function\" && typeof s.end === \"function\";\nexports.isWritable = isWritable;\nconst EOF = Symbol(\"EOF\");\nconst MAYBE_EMIT_END = Symbol(\"maybeEmitEnd\");\nconst EMITTED_END = Symbol(\"emittedEnd\");\nconst EMITTING_END = Symbol(\"emittingEnd\");\nconst EMITTED_ERROR = Symbol(\"emittedError\");\nconst CLOSED = Symbol(\"closed\");\nconst READ = Symbol(\"read\");\nconst FLUSH = Symbol(\"flush\");\nconst FLUSHCHUNK = Symbol(\"flushChunk\");\nconst ENCODING = Symbol(\"encoding\");\nconst DECODER = Symbol(\"decoder\");\nconst FLOWING = Symbol(\"flowing\");\nconst PAUSED = Symbol(\"paused\");\nconst RESUME = Symbol(\"resume\");\nconst BUFFER = Symbol(\"buffer\");\nconst PIPES = Symbol(\"pipes\");\nconst BUFFERLENGTH = Symbol(\"bufferLength\");\nconst BUFFERPUSH = Symbol(\"bufferPush\");\nconst BUFFERSHIFT = Symbol(\"bufferShift\");\nconst OBJECTMODE = Symbol(\"objectMode\");\n// internal event when stream is destroyed\nconst DESTROYED = Symbol(\"destroyed\");\n// internal event when stream has an error\nconst ERROR = Symbol(\"error\");\nconst EMITDATA = Symbol(\"emitData\");\nconst EMITEND = Symbol(\"emitEnd\");\nconst EMITEND2 = Symbol(\"emitEnd2\");\nconst ASYNC = Symbol(\"async\");\nconst ABORT = Symbol(\"abort\");\nconst ABORTED = Symbol(\"aborted\");\nconst SIGNAL = Symbol(\"signal\");\nconst DATALISTENERS = Symbol(\"dataListeners\");\nconst DISCARDED = Symbol(\"discarded\");\nconst defer = (fn)=>Promise.resolve().then(fn);\nconst nodefer = (fn)=>fn();\nconst isEndish = (ev)=>ev === \"end\" || ev === \"finish\" || ev === \"prefinish\";\nconst isArrayBufferLike = (b)=>b instanceof ArrayBuffer || !!b && typeof b === \"object\" && b.constructor && b.constructor.name === \"ArrayBuffer\" && b.byteLength >= 0;\nconst isArrayBufferView = (b)=>!Buffer.isBuffer(b) && ArrayBuffer.isView(b);\n/**\n * Internal class representing a pipe to a destination stream.\n *\n * @internal\n */ class Pipe {\n    constructor(src, dest, opts){\n        this.src = src;\n        this.dest = dest;\n        this.opts = opts;\n        this.ondrain = ()=>src[RESUME]();\n        this.dest.on(\"drain\", this.ondrain);\n    }\n    unpipe() {\n        this.dest.removeListener(\"drain\", this.ondrain);\n    }\n    // only here for the prototype\n    /* c8 ignore start */ proxyErrors(_er) {}\n    /* c8 ignore stop */ end() {\n        this.unpipe();\n        if (this.opts.end) this.dest.end();\n    }\n}\n/**\n * Internal class representing a pipe to a destination stream where\n * errors are proxied.\n *\n * @internal\n */ class PipeProxyErrors extends Pipe {\n    unpipe() {\n        this.src.removeListener(\"error\", this.proxyErrors);\n        super.unpipe();\n    }\n    constructor(src, dest, opts){\n        super(src, dest, opts);\n        this.proxyErrors = (er)=>dest.emit(\"error\", er);\n        src.on(\"error\", this.proxyErrors);\n    }\n}\nconst isObjectModeOptions = (o)=>!!o.objectMode;\nconst isEncodingOptions = (o)=>!o.objectMode && !!o.encoding && o.encoding !== \"buffer\";\n/**\n * Main export, the Minipass class\n *\n * `RType` is the type of data emitted, defaults to Buffer\n *\n * `WType` is the type of data to be written, if RType is buffer or string,\n * then any {@link Minipass.ContiguousData} is allowed.\n *\n * `Events` is the set of event handler signatures that this object\n * will emit, see {@link Minipass.Events}\n */ class Minipass extends events_1.EventEmitter {\n    /**\n     * If `RType` is Buffer, then options do not need to be provided.\n     * Otherwise, an options object must be provided to specify either\n     * {@link Minipass.SharedOptions.objectMode} or\n     * {@link Minipass.SharedOptions.encoding}, as appropriate.\n     */ constructor(...args){\n        const options = args[0] || {};\n        super();\n        this[FLOWING] = false;\n        this[PAUSED] = false;\n        this[PIPES] = [];\n        this[BUFFER] = [];\n        this[EOF] = false;\n        this[EMITTED_END] = false;\n        this[EMITTING_END] = false;\n        this[CLOSED] = false;\n        this[EMITTED_ERROR] = null;\n        this[BUFFERLENGTH] = 0;\n        this[DESTROYED] = false;\n        this[ABORTED] = false;\n        this[DATALISTENERS] = 0;\n        this[DISCARDED] = false;\n        /**\n     * true if the stream can be written\n     */ this.writable = true;\n        /**\n     * true if the stream can be read\n     */ this.readable = true;\n        if (options.objectMode && typeof options.encoding === \"string\") {\n            throw new TypeError(\"Encoding and objectMode may not be used together\");\n        }\n        if (isObjectModeOptions(options)) {\n            this[OBJECTMODE] = true;\n            this[ENCODING] = null;\n        } else if (isEncodingOptions(options)) {\n            this[ENCODING] = options.encoding;\n            this[OBJECTMODE] = false;\n        } else {\n            this[OBJECTMODE] = false;\n            this[ENCODING] = null;\n        }\n        this[ASYNC] = !!options.async;\n        this[DECODER] = this[ENCODING] ? new string_decoder_1.StringDecoder(this[ENCODING]) : null;\n        //@ts-ignore - private option for debugging and testing\n        if (options && options.debugExposeBuffer === true) {\n            Object.defineProperty(this, \"buffer\", {\n                get: ()=>this[BUFFER]\n            });\n        }\n        //@ts-ignore - private option for debugging and testing\n        if (options && options.debugExposePipes === true) {\n            Object.defineProperty(this, \"pipes\", {\n                get: ()=>this[PIPES]\n            });\n        }\n        const { signal } = options;\n        if (signal) {\n            this[SIGNAL] = signal;\n            if (signal.aborted) {\n                this[ABORT]();\n            } else {\n                signal.addEventListener(\"abort\", ()=>this[ABORT]());\n            }\n        }\n    }\n    /**\n     * The amount of data stored in the buffer waiting to be read.\n     *\n     * For Buffer strings, this will be the total byte length.\n     * For string encoding streams, this will be the string character length,\n     * according to JavaScript's `string.length` logic.\n     * For objectMode streams, this is a count of the items waiting to be\n     * emitted.\n     */ get bufferLength() {\n        return this[BUFFERLENGTH];\n    }\n    /**\n     * The `BufferEncoding` currently in use, or `null`\n     */ get encoding() {\n        return this[ENCODING];\n    }\n    /**\n     * @deprecated - This is a read only property\n     */ set encoding(_enc) {\n        throw new Error(\"Encoding must be set at instantiation time\");\n    }\n    /**\n     * @deprecated - Encoding may only be set at instantiation time\n     */ setEncoding(_enc) {\n        throw new Error(\"Encoding must be set at instantiation time\");\n    }\n    /**\n     * True if this is an objectMode stream\n     */ get objectMode() {\n        return this[OBJECTMODE];\n    }\n    /**\n     * @deprecated - This is a read-only property\n     */ set objectMode(_om) {\n        throw new Error(\"objectMode must be set at instantiation time\");\n    }\n    /**\n     * true if this is an async stream\n     */ get [\"async\"]() {\n        return this[ASYNC];\n    }\n    /**\n     * Set to true to make this stream async.\n     *\n     * Once set, it cannot be unset, as this would potentially cause incorrect\n     * behavior.  Ie, a sync stream can be made async, but an async stream\n     * cannot be safely made sync.\n     */ set [\"async\"](a) {\n        this[ASYNC] = this[ASYNC] || !!a;\n    }\n    // drop everything and get out of the flow completely\n    [ABORT]() {\n        this[ABORTED] = true;\n        this.emit(\"abort\", this[SIGNAL]?.reason);\n        this.destroy(this[SIGNAL]?.reason);\n    }\n    /**\n     * True if the stream has been aborted.\n     */ get aborted() {\n        return this[ABORTED];\n    }\n    /**\n     * No-op setter. Stream aborted status is set via the AbortSignal provided\n     * in the constructor options.\n     */ set aborted(_) {}\n    write(chunk, encoding, cb) {\n        if (this[ABORTED]) return false;\n        if (this[EOF]) throw new Error(\"write after end\");\n        if (this[DESTROYED]) {\n            this.emit(\"error\", Object.assign(new Error(\"Cannot call write after a stream was destroyed\"), {\n                code: \"ERR_STREAM_DESTROYED\"\n            }));\n            return true;\n        }\n        if (typeof encoding === \"function\") {\n            cb = encoding;\n            encoding = \"utf8\";\n        }\n        if (!encoding) encoding = \"utf8\";\n        const fn = this[ASYNC] ? defer : nodefer;\n        // convert array buffers and typed array views into buffers\n        // at some point in the future, we may want to do the opposite!\n        // leave strings and buffers as-is\n        // anything is only allowed if in object mode, so throw\n        if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n            if (isArrayBufferView(chunk)) {\n                //@ts-ignore - sinful unsafe type changing\n                chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n            } else if (isArrayBufferLike(chunk)) {\n                //@ts-ignore - sinful unsafe type changing\n                chunk = Buffer.from(chunk);\n            } else if (typeof chunk !== \"string\") {\n                throw new Error(\"Non-contiguous data written to non-objectMode stream\");\n            }\n        }\n        // handle object mode up front, since it's simpler\n        // this yields better performance, fewer checks later.\n        if (this[OBJECTMODE]) {\n            // maybe impossible?\n            /* c8 ignore start */ if (this[FLOWING] && this[BUFFERLENGTH] !== 0) this[FLUSH](true);\n            /* c8 ignore stop */ if (this[FLOWING]) this.emit(\"data\", chunk);\n            else this[BUFFERPUSH](chunk);\n            if (this[BUFFERLENGTH] !== 0) this.emit(\"readable\");\n            if (cb) fn(cb);\n            return this[FLOWING];\n        }\n        // at this point the chunk is a buffer or string\n        // don't buffer it up or send it to the decoder\n        if (!chunk.length) {\n            if (this[BUFFERLENGTH] !== 0) this.emit(\"readable\");\n            if (cb) fn(cb);\n            return this[FLOWING];\n        }\n        // fast-path writing strings of same encoding to a stream with\n        // an empty buffer, skipping the buffer/decoder dance\n        if (typeof chunk === \"string\" && // unless it is a string already ready for us to use\n        !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) {\n            //@ts-ignore - sinful unsafe type change\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (Buffer.isBuffer(chunk) && this[ENCODING]) {\n            //@ts-ignore - sinful unsafe type change\n            chunk = this[DECODER].write(chunk);\n        }\n        // Note: flushing CAN potentially switch us into not-flowing mode\n        if (this[FLOWING] && this[BUFFERLENGTH] !== 0) this[FLUSH](true);\n        if (this[FLOWING]) this.emit(\"data\", chunk);\n        else this[BUFFERPUSH](chunk);\n        if (this[BUFFERLENGTH] !== 0) this.emit(\"readable\");\n        if (cb) fn(cb);\n        return this[FLOWING];\n    }\n    /**\n     * Low-level explicit read method.\n     *\n     * In objectMode, the argument is ignored, and one item is returned if\n     * available.\n     *\n     * `n` is the number of bytes (or in the case of encoding streams,\n     * characters) to consume. If `n` is not provided, then the entire buffer\n     * is returned, or `null` is returned if no data is available.\n     *\n     * If `n` is greater that the amount of data in the internal buffer,\n     * then `null` is returned.\n     */ read(n) {\n        if (this[DESTROYED]) return null;\n        this[DISCARDED] = false;\n        if (this[BUFFERLENGTH] === 0 || n === 0 || n && n > this[BUFFERLENGTH]) {\n            this[MAYBE_EMIT_END]();\n            return null;\n        }\n        if (this[OBJECTMODE]) n = null;\n        if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {\n            // not object mode, so if we have an encoding, then RType is string\n            // otherwise, must be Buffer\n            this[BUFFER] = [\n                this[ENCODING] ? this[BUFFER].join(\"\") : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])\n            ];\n        }\n        const ret = this[READ](n || null, this[BUFFER][0]);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [READ](n, chunk) {\n        if (this[OBJECTMODE]) this[BUFFERSHIFT]();\n        else {\n            const c = chunk;\n            if (n === c.length || n === null) this[BUFFERSHIFT]();\n            else if (typeof c === \"string\") {\n                this[BUFFER][0] = c.slice(n);\n                chunk = c.slice(0, n);\n                this[BUFFERLENGTH] -= n;\n            } else {\n                this[BUFFER][0] = c.subarray(n);\n                chunk = c.subarray(0, n);\n                this[BUFFERLENGTH] -= n;\n            }\n        }\n        this.emit(\"data\", chunk);\n        if (!this[BUFFER].length && !this[EOF]) this.emit(\"drain\");\n        return chunk;\n    }\n    end(chunk, encoding, cb) {\n        if (typeof chunk === \"function\") {\n            cb = chunk;\n            chunk = undefined;\n        }\n        if (typeof encoding === \"function\") {\n            cb = encoding;\n            encoding = \"utf8\";\n        }\n        if (chunk !== undefined) this.write(chunk, encoding);\n        if (cb) this.once(\"end\", cb);\n        this[EOF] = true;\n        this.writable = false;\n        // if we haven't written anything, then go ahead and emit,\n        // even if we're not reading.\n        // we'll re-emit if a new 'end' listener is added anyway.\n        // This makes MP more suitable to write-only use cases.\n        if (this[FLOWING] || !this[PAUSED]) this[MAYBE_EMIT_END]();\n        return this;\n    }\n    // don't let the internal resume be overwritten\n    [RESUME]() {\n        if (this[DESTROYED]) return;\n        if (!this[DATALISTENERS] && !this[PIPES].length) {\n            this[DISCARDED] = true;\n        }\n        this[PAUSED] = false;\n        this[FLOWING] = true;\n        this.emit(\"resume\");\n        if (this[BUFFER].length) this[FLUSH]();\n        else if (this[EOF]) this[MAYBE_EMIT_END]();\n        else this.emit(\"drain\");\n    }\n    /**\n     * Resume the stream if it is currently in a paused state\n     *\n     * If called when there are no pipe destinations or `data` event listeners,\n     * this will place the stream in a \"discarded\" state, where all data will\n     * be thrown away. The discarded state is removed if a pipe destination or\n     * data handler is added, if pause() is called, or if any synchronous or\n     * asynchronous iteration is started.\n     */ resume() {\n        return this[RESUME]();\n    }\n    /**\n     * Pause the stream\n     */ pause() {\n        this[FLOWING] = false;\n        this[PAUSED] = true;\n        this[DISCARDED] = false;\n    }\n    /**\n     * true if the stream has been forcibly destroyed\n     */ get destroyed() {\n        return this[DESTROYED];\n    }\n    /**\n     * true if the stream is currently in a flowing state, meaning that\n     * any writes will be immediately emitted.\n     */ get flowing() {\n        return this[FLOWING];\n    }\n    /**\n     * true if the stream is currently in a paused state\n     */ get paused() {\n        return this[PAUSED];\n    }\n    [BUFFERPUSH](chunk) {\n        if (this[OBJECTMODE]) this[BUFFERLENGTH] += 1;\n        else this[BUFFERLENGTH] += chunk.length;\n        this[BUFFER].push(chunk);\n    }\n    [BUFFERSHIFT]() {\n        if (this[OBJECTMODE]) this[BUFFERLENGTH] -= 1;\n        else this[BUFFERLENGTH] -= this[BUFFER][0].length;\n        return this[BUFFER].shift();\n    }\n    [FLUSH](noDrain = false) {\n        do {}while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);\n        if (!noDrain && !this[BUFFER].length && !this[EOF]) this.emit(\"drain\");\n    }\n    [FLUSHCHUNK](chunk) {\n        this.emit(\"data\", chunk);\n        return this[FLOWING];\n    }\n    /**\n     * Pipe all data emitted by this stream into the destination provided.\n     *\n     * Triggers the flow of data.\n     */ pipe(dest, opts) {\n        if (this[DESTROYED]) return dest;\n        this[DISCARDED] = false;\n        const ended = this[EMITTED_END];\n        opts = opts || {};\n        if (dest === proc.stdout || dest === proc.stderr) opts.end = false;\n        else opts.end = opts.end !== false;\n        opts.proxyErrors = !!opts.proxyErrors;\n        // piping an ended stream ends immediately\n        if (ended) {\n            if (opts.end) dest.end();\n        } else {\n            // \"as\" here just ignores the WType, which pipes don't care about,\n            // since they're only consuming from us, and writing to the dest\n            this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));\n            if (this[ASYNC]) defer(()=>this[RESUME]());\n            else this[RESUME]();\n        }\n        return dest;\n    }\n    /**\n     * Fully unhook a piped destination stream.\n     *\n     * If the destination stream was the only consumer of this stream (ie,\n     * there are no other piped destinations or `'data'` event listeners)\n     * then the flow of data will stop until there is another consumer or\n     * {@link Minipass#resume} is explicitly called.\n     */ unpipe(dest) {\n        const p = this[PIPES].find((p)=>p.dest === dest);\n        if (p) {\n            if (this[PIPES].length === 1) {\n                if (this[FLOWING] && this[DATALISTENERS] === 0) {\n                    this[FLOWING] = false;\n                }\n                this[PIPES] = [];\n            } else this[PIPES].splice(this[PIPES].indexOf(p), 1);\n            p.unpipe();\n        }\n    }\n    /**\n     * Alias for {@link Minipass#on}\n     */ addListener(ev, handler) {\n        return this.on(ev, handler);\n    }\n    /**\n     * Mostly identical to `EventEmitter.on`, with the following\n     * behavior differences to prevent data loss and unnecessary hangs:\n     *\n     * - Adding a 'data' event handler will trigger the flow of data\n     *\n     * - Adding a 'readable' event handler when there is data waiting to be read\n     *   will cause 'readable' to be emitted immediately.\n     *\n     * - Adding an 'endish' event handler ('end', 'finish', etc.) which has\n     *   already passed will cause the event to be emitted immediately and all\n     *   handlers removed.\n     *\n     * - Adding an 'error' event handler after an error has been emitted will\n     *   cause the event to be re-emitted immediately with the error previously\n     *   raised.\n     */ on(ev, handler) {\n        const ret = super.on(ev, handler);\n        if (ev === \"data\") {\n            this[DISCARDED] = false;\n            this[DATALISTENERS]++;\n            if (!this[PIPES].length && !this[FLOWING]) {\n                this[RESUME]();\n            }\n        } else if (ev === \"readable\" && this[BUFFERLENGTH] !== 0) {\n            super.emit(\"readable\");\n        } else if (isEndish(ev) && this[EMITTED_END]) {\n            super.emit(ev);\n            this.removeAllListeners(ev);\n        } else if (ev === \"error\" && this[EMITTED_ERROR]) {\n            const h = handler;\n            if (this[ASYNC]) defer(()=>h.call(this, this[EMITTED_ERROR]));\n            else h.call(this, this[EMITTED_ERROR]);\n        }\n        return ret;\n    }\n    /**\n     * Alias for {@link Minipass#off}\n     */ removeListener(ev, handler) {\n        return this.off(ev, handler);\n    }\n    /**\n     * Mostly identical to `EventEmitter.off`\n     *\n     * If a 'data' event handler is removed, and it was the last consumer\n     * (ie, there are no pipe destinations or other 'data' event listeners),\n     * then the flow of data will stop until there is another consumer or\n     * {@link Minipass#resume} is explicitly called.\n     */ off(ev, handler) {\n        const ret = super.off(ev, handler);\n        // if we previously had listeners, and now we don't, and we don't\n        // have any pipes, then stop the flow, unless it's been explicitly\n        // put in a discarded flowing state via stream.resume().\n        if (ev === \"data\") {\n            this[DATALISTENERS] = this.listeners(\"data\").length;\n            if (this[DATALISTENERS] === 0 && !this[DISCARDED] && !this[PIPES].length) {\n                this[FLOWING] = false;\n            }\n        }\n        return ret;\n    }\n    /**\n     * Mostly identical to `EventEmitter.removeAllListeners`\n     *\n     * If all 'data' event handlers are removed, and they were the last consumer\n     * (ie, there are no pipe destinations), then the flow of data will stop\n     * until there is another consumer or {@link Minipass#resume} is explicitly\n     * called.\n     */ removeAllListeners(ev) {\n        const ret = super.removeAllListeners(ev);\n        if (ev === \"data\" || ev === undefined) {\n            this[DATALISTENERS] = 0;\n            if (!this[DISCARDED] && !this[PIPES].length) {\n                this[FLOWING] = false;\n            }\n        }\n        return ret;\n    }\n    /**\n     * true if the 'end' event has been emitted\n     */ get emittedEnd() {\n        return this[EMITTED_END];\n    }\n    [MAYBE_EMIT_END]() {\n        if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {\n            this[EMITTING_END] = true;\n            this.emit(\"end\");\n            this.emit(\"prefinish\");\n            this.emit(\"finish\");\n            if (this[CLOSED]) this.emit(\"close\");\n            this[EMITTING_END] = false;\n        }\n    }\n    /**\n     * Mostly identical to `EventEmitter.emit`, with the following\n     * behavior differences to prevent data loss and unnecessary hangs:\n     *\n     * If the stream has been destroyed, and the event is something other\n     * than 'close' or 'error', then `false` is returned and no handlers\n     * are called.\n     *\n     * If the event is 'end', and has already been emitted, then the event\n     * is ignored. If the stream is in a paused or non-flowing state, then\n     * the event will be deferred until data flow resumes. If the stream is\n     * async, then handlers will be called on the next tick rather than\n     * immediately.\n     *\n     * If the event is 'close', and 'end' has not yet been emitted, then\n     * the event will be deferred until after 'end' is emitted.\n     *\n     * If the event is 'error', and an AbortSignal was provided for the stream,\n     * and there are no listeners, then the event is ignored, matching the\n     * behavior of node core streams in the presense of an AbortSignal.\n     *\n     * If the event is 'finish' or 'prefinish', then all listeners will be\n     * removed after emitting the event, to prevent double-firing.\n     */ emit(ev, ...args) {\n        const data = args[0];\n        // error and close are only events allowed after calling destroy()\n        if (ev !== \"error\" && ev !== \"close\" && ev !== DESTROYED && this[DESTROYED]) {\n            return false;\n        } else if (ev === \"data\") {\n            return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? (defer(()=>this[EMITDATA](data)), true) : this[EMITDATA](data);\n        } else if (ev === \"end\") {\n            return this[EMITEND]();\n        } else if (ev === \"close\") {\n            this[CLOSED] = true;\n            // don't emit close before 'end' and 'finish'\n            if (!this[EMITTED_END] && !this[DESTROYED]) return false;\n            const ret = super.emit(\"close\");\n            this.removeAllListeners(\"close\");\n            return ret;\n        } else if (ev === \"error\") {\n            this[EMITTED_ERROR] = data;\n            super.emit(ERROR, data);\n            const ret = !this[SIGNAL] || this.listeners(\"error\").length ? super.emit(\"error\", data) : false;\n            this[MAYBE_EMIT_END]();\n            return ret;\n        } else if (ev === \"resume\") {\n            const ret = super.emit(\"resume\");\n            this[MAYBE_EMIT_END]();\n            return ret;\n        } else if (ev === \"finish\" || ev === \"prefinish\") {\n            const ret = super.emit(ev);\n            this.removeAllListeners(ev);\n            return ret;\n        }\n        // Some other unknown event\n        const ret = super.emit(ev, ...args);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [EMITDATA](data) {\n        for (const p of this[PIPES]){\n            if (p.dest.write(data) === false) this.pause();\n        }\n        const ret = this[DISCARDED] ? false : super.emit(\"data\", data);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [EMITEND]() {\n        if (this[EMITTED_END]) return false;\n        this[EMITTED_END] = true;\n        this.readable = false;\n        return this[ASYNC] ? (defer(()=>this[EMITEND2]()), true) : this[EMITEND2]();\n    }\n    [EMITEND2]() {\n        if (this[DECODER]) {\n            const data = this[DECODER].end();\n            if (data) {\n                for (const p of this[PIPES]){\n                    p.dest.write(data);\n                }\n                if (!this[DISCARDED]) super.emit(\"data\", data);\n            }\n        }\n        for (const p of this[PIPES]){\n            p.end();\n        }\n        const ret = super.emit(\"end\");\n        this.removeAllListeners(\"end\");\n        return ret;\n    }\n    /**\n     * Return a Promise that resolves to an array of all emitted data once\n     * the stream ends.\n     */ async collect() {\n        const buf = Object.assign([], {\n            dataLength: 0\n        });\n        if (!this[OBJECTMODE]) buf.dataLength = 0;\n        // set the promise first, in case an error is raised\n        // by triggering the flow here.\n        const p = this.promise();\n        this.on(\"data\", (c)=>{\n            buf.push(c);\n            if (!this[OBJECTMODE]) buf.dataLength += c.length;\n        });\n        await p;\n        return buf;\n    }\n    /**\n     * Return a Promise that resolves to the concatenation of all emitted data\n     * once the stream ends.\n     *\n     * Not allowed on objectMode streams.\n     */ async concat() {\n        if (this[OBJECTMODE]) {\n            throw new Error(\"cannot concat in objectMode\");\n        }\n        const buf = await this.collect();\n        return this[ENCODING] ? buf.join(\"\") : Buffer.concat(buf, buf.dataLength);\n    }\n    /**\n     * Return a void Promise that resolves once the stream ends.\n     */ async promise() {\n        return new Promise((resolve, reject)=>{\n            this.on(DESTROYED, ()=>reject(new Error(\"stream destroyed\")));\n            this.on(\"error\", (er)=>reject(er));\n            this.on(\"end\", ()=>resolve());\n        });\n    }\n    /**\n     * Asynchronous `for await of` iteration.\n     *\n     * This will continue emitting all chunks until the stream terminates.\n     */ [Symbol.asyncIterator]() {\n        // set this up front, in case the consumer doesn't call next()\n        // right away.\n        this[DISCARDED] = false;\n        let stopped = false;\n        const stop = async ()=>{\n            this.pause();\n            stopped = true;\n            return {\n                value: undefined,\n                done: true\n            };\n        };\n        const next = ()=>{\n            if (stopped) return stop();\n            const res = this.read();\n            if (res !== null) return Promise.resolve({\n                done: false,\n                value: res\n            });\n            if (this[EOF]) return stop();\n            let resolve;\n            let reject;\n            const onerr = (er)=>{\n                this.off(\"data\", ondata);\n                this.off(\"end\", onend);\n                this.off(DESTROYED, ondestroy);\n                stop();\n                reject(er);\n            };\n            const ondata = (value)=>{\n                this.off(\"error\", onerr);\n                this.off(\"end\", onend);\n                this.off(DESTROYED, ondestroy);\n                this.pause();\n                resolve({\n                    value,\n                    done: !!this[EOF]\n                });\n            };\n            const onend = ()=>{\n                this.off(\"error\", onerr);\n                this.off(\"data\", ondata);\n                this.off(DESTROYED, ondestroy);\n                stop();\n                resolve({\n                    done: true,\n                    value: undefined\n                });\n            };\n            const ondestroy = ()=>onerr(new Error(\"stream destroyed\"));\n            return new Promise((res, rej)=>{\n                reject = rej;\n                resolve = res;\n                this.once(DESTROYED, ondestroy);\n                this.once(\"error\", onerr);\n                this.once(\"end\", onend);\n                this.once(\"data\", ondata);\n            });\n        };\n        return {\n            next,\n            throw: stop,\n            return: stop,\n            [Symbol.asyncIterator] () {\n                return this;\n            }\n        };\n    }\n    /**\n     * Synchronous `for of` iteration.\n     *\n     * The iteration will terminate when the internal buffer runs out, even\n     * if the stream has not yet terminated.\n     */ [Symbol.iterator]() {\n        // set this up front, in case the consumer doesn't call next()\n        // right away.\n        this[DISCARDED] = false;\n        let stopped = false;\n        const stop = ()=>{\n            this.pause();\n            this.off(ERROR, stop);\n            this.off(DESTROYED, stop);\n            this.off(\"end\", stop);\n            stopped = true;\n            return {\n                done: true,\n                value: undefined\n            };\n        };\n        const next = ()=>{\n            if (stopped) return stop();\n            const value = this.read();\n            return value === null ? stop() : {\n                done: false,\n                value\n            };\n        };\n        this.once(\"end\", stop);\n        this.once(ERROR, stop);\n        this.once(DESTROYED, stop);\n        return {\n            next,\n            throw: stop,\n            return: stop,\n            [Symbol.iterator] () {\n                return this;\n            }\n        };\n    }\n    /**\n     * Destroy a stream, preventing it from being used for any further purpose.\n     *\n     * If the stream has a `close()` method, then it will be called on\n     * destruction.\n     *\n     * After destruction, any attempt to write data, read data, or emit most\n     * events will be ignored.\n     *\n     * If an error argument is provided, then it will be emitted in an\n     * 'error' event.\n     */ destroy(er) {\n        if (this[DESTROYED]) {\n            if (er) this.emit(\"error\", er);\n            else this.emit(DESTROYED);\n            return this;\n        }\n        this[DESTROYED] = true;\n        this[DISCARDED] = true;\n        // throw away all buffered data, it's never coming out\n        this[BUFFER].length = 0;\n        this[BUFFERLENGTH] = 0;\n        const wc = this;\n        if (typeof wc.close === \"function\" && !this[CLOSED]) wc.close();\n        if (er) this.emit(\"error\", er);\n        else this.emit(DESTROYED);\n        return this;\n    }\n    /**\n     * Alias for {@link isStream}\n     *\n     * Former export location, maintained for backwards compatibility.\n     *\n     * @deprecated\n     */ static get isStream() {\n        return exports.isStream;\n    }\n}\nexports.Minipass = Minipass; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minipass/dist/commonjs/index.js\n");

/***/ })

};
;